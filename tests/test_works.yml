- case: mypy_path_from_env
  out: |
     main:30: note: Revealed type is "Union[django.db.models.manager.Manager[djangomypytest.exampleapp.models.Child1], djangomypytest.exampleapp.models.ManagerFromChild2QuerySet[djangomypytest.exampleapp.models.Child2], django.db.models.manager.Manager[djangomypytest.exampleapp.models.Child3]]"
     main:36: note: Revealed type is "djangomypytest.exampleapp.models.Child1"
     main:39: note: Revealed type is "Union[django.db.models.query._QuerySet[djangomypytest.exampleapp.models.Child1, djangomypytest.exampleapp.models.Child1], djangomypytest.exampleapp.models.Child2QuerySet, django.db.models.query._QuerySet[djangomypytest.exampleapp.models.Child3, djangomypytest.exampleapp.models.Child3]]"
     main:42: note: Revealed type is "django.db.models.query._QuerySet[djangomypytest.exampleapp.models.Child1, djangomypytest.exampleapp.models.Child1]"
     main:45: note: Revealed type is "djangomypytest.exampleapp.models.Child2QuerySet"
     main:46: note: Revealed type is "djangomypytest.exampleapp.models.Child2QuerySet"
     main:47: note: Revealed type is "djangomypytest.exampleapp.models.ManagerFromChild2QuerySet[djangomypytest.exampleapp.models.Child2]"
     main:48: note: Revealed type is "djangomypytest.exampleapp.models.Child2QuerySet[djangomypytest.exampleapp.models.Child2]"
     main:51: note: Revealed type is "django.db.models.query._QuerySet[djangomypytest.exampleapp.models.Child1, djangomypytest.exampleapp.models.Child1]"
     main:54: note: Revealed type is "djangomypytest.exampleapp.models.Child2QuerySet"

  main: |
    from django.http import HttpRequest, HttpResponse, HttpResponseBase

    from djangomypytest.exampleapp.models import Child1, Child2, Parent
    from djangomypytest.mypy_plugin import Concrete, ConcreteQuerySet, DefaultQuerySet

    T_Child = Concrete.type_var("T_Child", Parent)


    def make_child(child: type[T_Child]) -> T_Child:
        return child.objects.create()


    def make_any_queryset(child: type[Concrete[Parent]]) -> ConcreteQuerySet[Parent]:
        return child.objects.all()


    def make_child1_queryset() -> DefaultQuerySet[Child1]:
        return Child1.objects.all()


    def make_child2_queryset() -> DefaultQuerySet[Child2]:
        return Child2.objects.all()


    def make_child_typevar_queryset(child: type[T_Child]) -> DefaultQuerySet[T_Child]:
        return child.objects.all()


    def ones(model: type[Concrete[Parent]]) -> list[str]:
        reveal_type(model.objects)
        return list(model.objects.values_list("one", flat=True))


    def index(request: HttpRequest) -> HttpResponseBase:
        made = make_child(Child1)
        reveal_type(made)

        any_qs = make_any_queryset(Child1)
        reveal_type(any_qs)

        qs1 = make_child1_queryset()
        reveal_type(qs1)

        qs2 = make_child2_queryset()
        reveal_type(qs2)
        reveal_type(qs2.all())
        reveal_type(Child2.objects)
        reveal_type(Child2.objects.all())

        tvqs1 = make_child_typevar_queryset(Child1)
        reveal_type(tvqs1)

        tvqs2 = make_child_typevar_queryset(Child2)
        reveal_type(tvqs2)

        return HttpResponse("Hello there")
